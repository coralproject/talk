name: Build, Test, and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  DOCKERHUB_USERNAME: "coralproject"
  GOOGLE_CLOUD_BUCKET: "coral-cdn"
  IMAGE_REPOSITORY: "coralproject/talk"
  IMAGE_CACHE_REPOSITORY: "coralproject/ci"
  SENTRY_ORG: "voxmedia"
  SENTRY_PROJECT: "coral"

jobs:
  build-and-test:
    name: Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.REPO_PATCHED_DEPLOY_KEY }}
      - name: Setup Node18.x
        uses: actions/setup-node@v4
        with:
          node-version: "18.16.x"
      - name: Install pnpm 8
        run: npm install -g pnpm@8.14.3 --registry=https://registry.npmjs.org
      # - name: npm Lockfile Version
      #   uses: mansona/npm-lockfile-version@v1
      #   with:
      #     version: 2
      - name: pnpm ci
        run: sh scripts/pnpm-ci.sh
      - name: Generate schemas and types
        run: sh scripts/generate.sh
      - name: Lint Source Code
        run: sh scripts/lint.sh
      - name: Lint Markdown
        run: |
          cd client
          pnpm run doctoc
          git diff --exit-code
      - name: Lint Versions
        run: |
          cd client
          npx @coralproject/package-version-lint
      - name: Run Server Unit Tests
        run: cd server && pnpm run test:server -- --ci --reporters=default --reporters=jest-junit
      - name: Run Client Stream Unit Tests
        run: cd client && pnpm run test:client:stream -- --ci --reporters=default --reporters=jest-junit
      - name: Run Client Admin Unit Tests
        run: cd client && pnpm run test:client:admin -- --ci --reporters=default --reporters=jest-junit
      - name: Run Client Other Unit Tests
        run: cd client && pnpm run test:client:other -- --ci --reporters=default --reporters=jest-junit
      - name: Build
        env:
          NODE_OPTIONS: "--max-old-space-size=14336"
        run: sh scripts/build.sh
      - name: Verify Bundle Size
        run: cd client && ./node_modules/.bin/bundlesize --enable-github-checks

  build-amd64:
    name: Build amd64
    runs-on: coral-ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.REPO_PATCHED_DEPLOY_KEY }}
      - name: Authenticate with GCP
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GAR_JSON_KEY }}"
      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Define RC_TAG
        run: echo "RC_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Verify Release Version
        run: |
          cd client
          npx @coralproject/package-version-lint --expect ${RC_TAG/#v}
          cd ../server
          npx @coralproject/package-version-lint --expect ${RC_TAG/#v}
      - name: Create the Pre-Tag Names
        run: |
          echo "MAJOR=`echo ${RC_TAG/#v} | cut -d. -f1`" >> $GITHUB_ENV
          echo "MINOR=`echo ${RC_TAG/#v} | cut -d. -f2`" >> $GITHUB_ENV
          echo "PATCH=`echo ${RC_TAG/#v} | cut -d. -f3`" >> $GITHUB_ENV
      - name: Create Final Tag names
        run: |
          echo "MAJOR_TAG=${MAJOR}" >> $GITHUB_ENV
          echo "MINOR_TAG=${MAJOR}.${MINOR}" >> $GITHUB_ENV
          echo "PATCH_TAG=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
      # - name: Build, Tag, Push Major Tag
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --build-arg REVISION_HASH=${{ env.GITHUB_SHA }} \
      #       --tag ${{ env.IMAGE_REPOSITORY }}:${{ env.MAJOR_TAG }}-amd64 \
      #       --cache-from type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-major-amd64 \
      #       --cache-to type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-major-amd64 \
      #       --push \
      #       --provenance=false \
      #       --sbom=false \
      #       .
      # - name: Build, Tag, Push Minor Tag
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --build-arg REVISION_HASH=${{ env.GITHUB_SHA }} \
      #       --tag ${{ env.IMAGE_REPOSITORY }}:${{ env.MINOR_TAG }}-amd64 \
      #       --cache-from type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-minor-amd64 \
      #       --cache-to type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-minor-amd64 \
      #       --push \
      #       --provenance=false \
      #       --sbom=false \
      #       .
      # - name: Build, Tag, Push Patch Tag
      #   run: |
      #     docker buildx build \
      #       --platform linux/amd64 \
      #       --build-arg REVISION_HASH=${{ env.GITHUB_SHA }} \
      #       --tag ${{ env.IMAGE_REPOSITORY }}:${{ env.PATCH_TAG }}-amd64 \
      #       --cache-from type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-patch-amd64 \
      #       --cache-to type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-patch-amd64 \
      #       --push \
      #       --provenance=false \
      #       --sbom=false \
      #       .

  build-arm64:
    name: Build arm64
    runs-on: coral-ci-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.REPO_PATCHED_DEPLOY_KEY }}
      - name: Authenticate with GCP
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GAR_JSON_KEY }}"
      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Define RC_TAG
        run: echo "RC_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Verify Release Version
        run: |
          cd client
          npx @coralproject/package-version-lint --expect ${RC_TAG/#v}
          cd ../server
          npx @coralproject/package-version-lint --expect ${RC_TAG/#v}
      - name: Create the Pre-Tag Names
        run: |
          echo "MAJOR=`echo ${RC_TAG/#v} | cut -d. -f1`" >> $GITHUB_ENV
          echo "MINOR=`echo ${RC_TAG/#v} | cut -d. -f2`" >> $GITHUB_ENV
          echo "PATCH=`echo ${RC_TAG/#v} | cut -d. -f3`" >> $GITHUB_ENV
      - name: Create Final Tag names
        run: |
          echo "MAJOR_TAG=${MAJOR}" >> $GITHUB_ENV
          echo "MINOR_TAG=${MAJOR}.${MINOR}" >> $GITHUB_ENV
          echo "PATCH_TAG=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
      # - name: Build, Tag, Push Major Tag
      #   run: |
      #     docker buildx build \
      #       --platform linux/arm64 \
      #       --build-arg REVISION_HASH=${{ env.GITHUB_SHA }} \
      #       --tag ${{ env.IMAGE_REPOSITORY }}:${{ env.MAJOR_TAG }}-arm64 \
      #       --cache-from type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-major-arm64 \
      #       --cache-to type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-major-arm64 \
      #       --push \
      #       --provenance=false \
      #       --sbom=false \
      #       .
      # - name: Build, Tag, Push Minor Tag
      #   run: |
      #     docker buildx build \
      #       --platform linux/arm64 \
      #       --build-arg REVISION_HASH=${{ env.GITHUB_SHA }} \
      #       --tag ${{ env.IMAGE_REPOSITORY }}:${{ env.MINOR_TAG }}-arm64 \
      #       --cache-from type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-minor-arm64 \
      #       --cache-to type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-minor-arm64 \
      #       --push \
      #       --provenance=false \
      #       --sbom=false \
      #       .
      # - name: Build, Tag, Push Patch Tag
      #   run: |
      #     docker buildx build \
      #       --platform linux/arm64 \
      #       --build-arg REVISION_HASH=${{ env.GITHUB_SHA }} \
      #       --tag ${{ env.IMAGE_REPOSITORY }}:${{ env.PATCH_TAG }}-arm64 \
      #       --cache-from type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-patch-arm64 \
      #       --cache-to type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-patch-arm64 \
      #       --push \
      #       --provenance=false \
      #       --sbom=false \
      #       .

  create-manifest:
    name: Create Manifest
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Define RC_TAG
        run: echo "RC_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Verify Release Version
        run: |
          cd client
          npx @coralproject/package-version-lint --expect ${RC_TAG/#v}
          cd ../server
          npx @coralproject/package-version-lint --expect ${RC_TAG/#v}
      - name: Create the Pre-Tag Names
        run: |
          echo "MAJOR=`echo ${RC_TAG/#v} | cut -d. -f1`" >> $GITHUB_ENV
          echo "MINOR=`echo ${RC_TAG/#v} | cut -d. -f2`" >> $GITHUB_ENV
          echo "PATCH=`echo ${RC_TAG/#v} | cut -d. -f3`" >> $GITHUB_ENV
      - name: Create Final Tag names
        run: |
          echo "MAJOR_TAG=${MAJOR}" >> $GITHUB_ENV
          echo "MINOR_TAG=${MAJOR}.${MINOR}" >> $GITHUB_ENV
          echo "PATCH_TAG=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
      # - name: Create and Push Manifest for Major Tag
      #   run: |
      #     docker manifest create ${{ env.IMAGE_REPOSITORY }}:${{ env.MAJOR_TAG }} \
      #       --amend ${{ env.IMAGE_REPOSITORY }}:${{ env.MAJOR_TAG }}-amd64 \
      #       --amend ${{ env.IMAGE_REPOSITORY }}:${{ env.MAJOR_TAG }}-arm64
      #     docker manifest push ${{ env.IMAGE_REPOSITORY }}:${{ env.MAJOR_TAG }}
      # - name: Create and Push Manifest for Minor Tag
      #   run: |
      #     docker manifest create ${{ env.IMAGE_REPOSITORY }}:${{ env.MINOR_TAG }} \
      #       --amend ${{ env.IMAGE_REPOSITORY }}:${{ env.MINOR_TAG }}-amd64 \
      #       --amend ${{ env.IMAGE_REPOSITORY }}:${{ env.MINOR_TAG }}-arm64
      #     docker manifest push ${{ env.IMAGE_REPOSITORY }}:${{ env.MINOR_TAG }}
      # - name: Create and Push Manifest for Patch Tag
      #   run: |
      #     docker manifest create ${{ env.IMAGE_REPOSITORY }}:${{ env.PATCH_TAG }} \
      #       --amend ${{ env.IMAGE_REPOSITORY }}:${{ env.PATCH_TAG }}-amd64 \
      #       --amend ${{ env.IMAGE_REPOSITORY }}:${{ env.PATCH_TAG }}-arm64
      #     docker manifest push ${{ env.IMAGE_REPOSITORY }}:${{ env.PATCH_TAG }}

  deploy-assets:
    name: Deploy Assets
    needs: [create-manifest]
    runs-on: coral-ci
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Authenticate with GCP
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GAR_JSON_KEY }}"
      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"
      - name: Define RC_TAG
        run: echo "RC_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create the Pre-Tag Names
        run: |
          echo "MAJOR=`echo ${RC_TAG/#v} | cut -d. -f1`" >> $GITHUB_ENV
          echo "MINOR=`echo ${RC_TAG/#v} | cut -d. -f2`" >> $GITHUB_ENV
          echo "PATCH=`echo ${RC_TAG/#v} | cut -d. -f3`" >> $GITHUB_ENV
      - name: Create Final Tag names
        run: |
          echo "MAJOR_TAG=${MAJOR}" >> $GITHUB_ENV
          echo "MINOR_TAG=${MAJOR}.${MINOR}" >> $GITHUB_ENV
          echo "PATCH_TAG=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
      # - name: Deploy Static Assets to GCS Bucket
      #   run: |
      #     CONTAINER_ID=$(docker create "coralproject/talk:${PATCH_TAG}")
      #     docker cp "${CONTAINER_ID}:/usr/src/app/client/dist/static" static/
      #     docker rm "${CONTAINER_ID}"
      #     find ./static -type f -name "*.gz" -print -delete
      #     gsutil -m -h "Cache-Control: public, max-age=86400, immutable" cp -r -z "js,css,map,txt,json" ./static/** "gs://${GOOGLE_CLOUD_BUCKET}/${PATCH_TAG}/"
      # - name: Upload to Sentry
      #   run: |
      #     CONTAINER_ID=$(docker create "coralproject/talk:${PATCH_TAG}")
      #     docker cp "${CONTAINER_ID}:/usr/src/app/client/dist" dist/
      #     docker rm "${CONTAINER_ID}"
      #     npx @sentry/cli -V
      #     npx @sentry/cli releases files "coral@${PATCH_TAG}" upload-sourcemaps ./dist --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }}
