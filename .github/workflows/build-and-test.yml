name: Build and Test

on:
  workflow_dispatch:
  push:
  merge_group:

env:
  IMAGE_REPOSITORY: "us-east1-docker.pkg.dev/the-coral-project/coral/talk"
  IMAGE_CACHE_REPOSITORY: "coralproject/ci"
  DOCKERHUB_USERNAME: "coralproject"

jobs:
  build-and-test:
    name: Build and Test
    runs-on: coral-ci-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.REPO_PATCHED_DEPLOY_KEY }}
      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GAR_JSON_KEY }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Define SHORT_SHA with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Setup Node18.x
        uses: actions/setup-node@v4
        with:
          node-version: "18.16.x"
      - name: Install pnpm 8
        run: npm install -g pnpm@8.14.3 --registry=https://registry.npmjs.org
      # -
      #   name: npm Lockfile Version (client)
      #   uses: mansona/npm-lockfile-version@v1
      #   with:
      #     entryPoint: ./client
      #     version: 2
      # -
      #   name: npm Lockfile Version (common)
      #   uses: mansona/npm-lockfile-version@v1
      #   with:
      #     entryPoint: ./common
      #     version: 2
      # -
      #   name: npm Lockfile Version (server)
      #   uses: mansona/npm-lockfile-version@v1
      #   with:
      #     entryPoint: ./server
      #     version: 2
      - name: pnpm ci
        run: sh scripts/pnpm-ci.sh
      - name: Generate schemas and types
        run: sh scripts/generate.sh
      - name: Lint Source Code
        run: sh scripts/lint.sh
      - name: Lint Versions
        run: |
          cd client
          npx @coralproject/package-version-lint
      - name: Run Server Unit Tests
        run: cd server && pnpm run test:server -- --ci --reporters=default --reporters=jest-junit
      - name: Run Client Stream Unit Tests
        run: cd client && npm run test:client:stream -- --ci --reporters=default --reporters=jest-junit
      - name: Run Client Admin Unit Tests
        run: cd client && npm run test:client:admin -- --ci --reporters=default --reporters=jest-junit
      - name: Run Client Other Unit Tests
        run: cd client && npm run test:client:other -- --ci --reporters=default --reporters=jest-junit
      - name: Build
        env:
          NODE_OPTIONS: "--max-old-space-size=14336"
        run: sh scripts/build.sh
      - name: Verify Bundle Size
        run: cd client && ./node_modules/.bin/bundlesize --enable-github-checks

  build-amd64:
    name: Build amd64
    runs-on: coral-ci
    if: github.ref == 'refs/heads/develop' || startsWith( github.ref, 'refs/heads/release-') || github.ref == 'refs/heads/bchan/arm'
    steps:
      # Build tag push the image after a merge to develop
      - name: Build, Tag, Push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:bchan-arches-amd64
          # tags: ${{ env.IMAGE_REPOSITORY }}:develop-latest-amd64
          build-args: |
            REVISION_HASH=${GITHUB_SHA}
          # cache-from: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-develop
          # cache-to: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-develop
      # Build tag push the release candidate image when the branch name begins with release-
      - name: Build, Tag, Push RC
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}-amd64
          build-args: |
            REVISION_HASH=${GITHUB_SHA}
          # cache-from: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-release-amd64
          # cache-to: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-release-amd64

  build-arm64:
    name: Build arm64
    runs-on: coral-ci-arm
    if: github.ref == 'refs/heads/develop' || startsWith( github.ref, 'refs/heads/release-') || github.ref == 'refs/heads/bchan/arm'
    steps:
      # Build tag push the image after a merge to develop
      - name: Build, Tag, Push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:bchan-arches-arm64
          # tags: ${{ env.IMAGE_REPOSITORY }}:develop-latest
          build-args: |
            REVISION_HASH=${GITHUB_SHA}
          # cache-from: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-develop
          # cache-to: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-develop
      # Build tag push the release candidate image when the branch name begins with release-
      - name: Build, Tag, Push RC
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}-arm64
          build-args: |
            REVISION_HASH=${GITHUB_SHA}
          # cache-from: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-release-arm64
          # cache-to: type=registry,ref=${{ env.IMAGE_CACHE_REPOSITORY }}:cache-release-arm64
  merge-manifest:
    name: Merge Manifest
    needs: [build-arm64, build-amd64]
    runs-on: ubuntu-24.04
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and Push Manifest
        run: |
          docker manifest create ${{ env.IMAGE_REPOSITORY }}:bchan-arches \
            ${{ env.IMAGE_REPOSITORY }}:bchan-arches-amd64 \
            ${{ env.IMAGE_REPOSITORY }}:bchan-arches-arm64
          docker manifest create ${{ env.IMAGE_REPOSITORY }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} \
            ${{ env.IMAGE_REPOSITORY }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}-amd64 \
            ${{ env.IMAGE_REPOSITORY }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}-arm64

          docker manifest push ${{ env.IMAGE_REPOSITORY }}:bchan-arches
          docker manifest push ${{ env.IMAGE_REPOSITORY }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}
