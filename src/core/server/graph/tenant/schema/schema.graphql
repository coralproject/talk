################################################################################
## Custom Directives
################################################################################

"""
auth is a directive that will enforce authorization rules on the schema
definition. It will restrict the viewer of the field based on roles or if the
`userIDField` is specified, it  will see if the current users ID equals the field
specified. This allows users that own a specific resource (like a comment, or a
flag) see their own content, but restrict it to everyone else. If the directive
is used without options, it simply requires a logged in user.
"""
directive @auth(roles: [USER_ROLE!], userIDField: String) on FIELD_DEFINITION

################################################################################
## Custom Scalar Types
################################################################################

"""
Time represented as an ISO8601 string.
"""
scalar Time

"""
Cursor represents a paginating cursor.
"""
scalar Cursor

################################################################################
## Actions
################################################################################

"""
COMMENT_FLAG_REPORTED_REASON is a reason that is reported by a User on a
Comment.
"""
enum COMMENT_FLAG_REPORTED_REASON {
  """
  COMMENT_REPORTED_OFFENSIVE is used when a User reported a Comment as being
  offensive.
  """
  COMMENT_REPORTED_OFFENSIVE

  """
  COMMENT_REPORTED_SPAM is used when a User reported a Comment as appearing like
  spam.
  """
  COMMENT_REPORTED_SPAM
}

"""
COMMENT_FLAG_DETECTED_REASON is a reason that is detected by the system on a
Comment.
"""
enum COMMENT_FLAG_DETECTED_REASON {
  """
  COMMENT_DETECTED_TOXIC is used when the Comment was detected as being toxic by
  the system.
  """
  COMMENT_DETECTED_TOXIC

  """
  COMMENT_DETECTED_SPAM is used when the Comment was detected as having spam by
  the system.
  """
  COMMENT_DETECTED_SPAM

  """
  COMMENT_DETECTED_BODY_COUNT is used when the Comment was detected as exceeding
  the body length by the system.
  """
  COMMENT_DETECTED_BODY_COUNT

  """
  COMMENT_DETECTED_TRUST is used when the Comment being left was done by a User
  that has a low karma/trust score.
  """
  COMMENT_DETECTED_TRUST

  """
  COMMENT_DETECTED_LINKS is used when the Comment was detected as containing
  links.
  """
  COMMENT_DETECTED_LINKS

  """
  COMMENT_DETECTED_BANNED_WORD is used when the Comment was detected as
  containing a banned word.
  """
  COMMENT_DETECTED_BANNED_WORD

  """
  COMMENT_DETECTED_SUSPECT_WORD is used when the Comment was detected as
  containing a suspect word.
  """
  COMMENT_DETECTED_SUSPECT_WORD
}

"""
COMMENT_FLAG_REASON is the union of the COMMENT_FLAG_REPORTED_REASON
and COMMENT_FLAG_DETECTED_REASON types.
"""
enum COMMENT_FLAG_REASON {
  COMMENT_REPORTED_OFFENSIVE
  COMMENT_REPORTED_SPAM
  COMMENT_DETECTED_TOXIC
  COMMENT_DETECTED_SPAM
  COMMENT_DETECTED_BODY_COUNT
  COMMENT_DETECTED_TRUST
  COMMENT_DETECTED_LINKS
  COMMENT_DETECTED_BANNED_WORD
  COMMENT_DETECTED_SUSPECT_WORD
}

"""
ReactionActionCounts stores all the counts for the counts for the reaction
action on a given item.
"""
type ReactionActionCounts {
  """
  total is the total number of reactions against a given item.
  """
  total: Int!
}

"""
DontAgreeActionCounts stores all the counts for the counts for the dontAgree
action on a given item.
"""
type DontAgreeActionCounts {
  """
  total is the total number of dontAgree actions against a given item.
  """
  total: Int!
}

type FlagReasonActionCounts {
  COMMENT_REPORTED_OFFENSIVE: Int!
  COMMENT_REPORTED_SPAM: Int!
  COMMENT_DETECTED_TOXIC: Int!
  COMMENT_DETECTED_SPAM: Int!
  COMMENT_DETECTED_BODY_COUNT: Int!
  COMMENT_DETECTED_TRUST: Int!
  COMMENT_DETECTED_LINKS: Int!
  COMMENT_DETECTED_BANNED_WORD: Int!
  COMMENT_DETECTED_SUSPECT_WORD: Int!
}

"""
FlagActionCounts stores all the counts for the counts for the flag action on a
given item and the reason counts.
"""
type FlagActionCounts {
  """
  total is the total number of flags against a given item.
  """
  total: Int!

  """
  reasons stores the counts for the various reasons that an item could be
  flagged for.
  """
  reasons: FlagReasonActionCounts!
}

"""
ActionCounts returns the counts of each action for an item.
"""
type ActionCounts {
  """
  reaction returns the counts for the reaction action on an item.
  """
  reaction: ReactionActionCounts!

  """
  dontAgree returns the counts for the dontAgree action on an item. This edge is
  restricted to administrators and moderators.
  """
  dontAgree: DontAgreeActionCounts! @auth(roles: [ADMIN, MODERATOR])

  """
  flag returns the counts for the flag action on an item. This edge is
  restricted to administrators and moderators.
  """
  flag: FlagActionCounts! @auth(roles: [ADMIN, MODERATOR])
}

"""
ActionPresence returns whether or not a given item has one of the following
actions on it. This is typically used to determine if a given user has left
one of the following actions.
"""
type ActionPresence {
  """
  reaction is true when a reaction action was left on an item.
  """
  reaction: Boolean!

  """
  dontAgree is true when a dontAgree action was left on an item.
  """
  dontAgree: Boolean!

  """
  flag is true when a flag action was left on an item.
  """
  flag: Boolean!
}

################################################################################
## Settings
################################################################################

# The moderation mode of the site.
enum MODERATION_MODE {
  """
  Comments posted while in `PRE` mode will be labeled with a `PREMOD`
  status and will require a moderator decision before being visible.
  """
  PRE

  """
  Comments posted while in `POST` will be visible immediately.
  """
  POST
}

"""
Wordlist describes all the available wordlists.
"""
type Wordlist {
  """
  banned words will by default reject the comment if it is found.
  """
  banned: [String!]!

  """
  suspect words will simply flag the comment.
  """
  suspect: [String!]!
}

################################################################################
## Auth
################################################################################

##########################
## LocalAuthIntegration
##########################

type LocalAuthIntegration {
  enabled: Boolean!
}

##########################
## SSOAuthIntegration
##########################

"""
SSOAuthIntegration is an AuthIntegration that provides a secret to the admins
of a tenant, where they can sign a SSO payload with it to provide to the
embed to allow single sign on.
"""
type SSOAuthIntegration {
  enabled: Boolean!

  """
  key is the secret that is used to sign tokens.
  """
  key: String @auth(roles: [ADMIN])

  """
  displayNameEnable when enabled, will allow Users to set and view their
  displayName's.
  """
  displayNameEnable: Boolean @auth(roles: [ADMIN])
}

##########################
## OIDCAuthIntegration
##########################

"""
OIDCAuthIntegration provides a way to store Open ID Connect credentials. This
will be used in the admin to provide staff logins for users.
"""
type OIDCAuthIntegration {
  enabled: Boolean!

  name: String
  clientID: String @auth(roles: [ADMIN])
  clientSecret: String @auth(roles: [ADMIN])
  authorizationURL: String @auth(roles: [ADMIN])
  tokenURL: String @auth(roles: [ADMIN])
  jwksURI: String @auth(roles: [ADMIN])
  issuer: String @auth(roles: [ADMIN])

  """
  displayNameEnable when enabled, will allow Users to set and view their
  displayName's.
  """
  displayNameEnable: Boolean @auth(roles: [ADMIN])
}

##########################
## GoogleAuthIntegration
##########################

type GoogleAuthIntegration {
  enabled: Boolean!
  clientID: String @auth(roles: [ADMIN])
  clientSecret: String @auth(roles: [ADMIN])
}

##########################
## FacebookAuthIntegration
##########################

type FacebookAuthIntegration {
  enabled: Boolean!
  clientID: String @auth(roles: [ADMIN])
  clientSecret: String @auth(roles: [ADMIN])
}

type AuthIntegrations {
  local: LocalAuthIntegration!
  sso: SSOAuthIntegration!
  oidc: OIDCAuthIntegration!
  google: GoogleAuthIntegration!
  facebook: FacebookAuthIntegration!
}

"""
Auth contains all the settings related to authentication and
authorization.
"""
type Auth {
  """
  integrations are the set of configurations for the variations of
  authentication solutions.
  """
  integrations: AuthIntegrations!
}

################################################################################
## ExternalIntegrations
################################################################################

type AkismetExternalIntegration {
  """
  enabled when True will enable the integration.
  """
  enabled: Boolean!

  """
  The key for the Akismet integration.
  """
  key: String

  """
  The site (blog) for the Akismet integration.
  """
  site: String
}

type PerspectiveExternalIntegration {
  """
  enabled when True will enable the integration.
  """
  enabled: Boolean!

  """
  The endpoint that Talk should use to communicate with the perspective API.
  """
  endpoint: String

  """
  The key for the Perspective API integration.
  """
  key: String

  """
  The threshold that given a specific toxic comment score, the comment will
  be marked by Talk as toxic.
  """
  threshold: Float

  """
  When True, comments sent will not be stored by the Google Perspective API.
  """
  doNotStore: Boolean
}

type ExternalIntegrations {
  """
  akismet provides integration with the Akismet Spam detection service.
  """
  akismet: AkismetExternalIntegration!

  """
  perspective provides integration with the Perspective API comment analysis
  platform.
  """
  perspective: PerspectiveExternalIntegration!
}

################################################################################
## Karma
################################################################################

"""
KarmaThreshold defines the bounds for which a User will become unreliable or
reliable based on their karma score. If the score is equal or less than the
unreliable value, they are unreliable. If the score is equal or more than the
reliable value, they are reliable. If they are neither reliable or unreliable
then they are neutral.
"""
type KarmaThreshold {
  reliable: Int!
  unreliable: Int!
}

type KarmaThresholds {
  """
  flag represents karma settings in relation to how well a User's flagging
  ability aligns with the moderation decisions made by moderators.
  """
  flag: KarmaThreshold!

  """
  comment represents the karma setting in relation to how well a User's comments are moderated.
  """
  comment: KarmaThreshold!
}

type Karma {
  """
  When true, checks will be completed to ensure that the Karma checks are
  completed.
  """
  enabled: Boolean!

  """
  karmaThresholds contains the currently set thresholds for triggering Trust
  behavior.
  """
  thresholds: KarmaThresholds!
}

################################################################################
## CharCount
################################################################################

type CharCount {
  """
  enabled when true, enables the character count moderation phase.
  """
  enabled: Boolean!

  """
  min is the smallest length of a Comment that may be posted.
  """
  min: Int

  """
  max is the largest length of a Comment that may be posted.
  """
  max: Int
}

################################################################################
## Email
################################################################################

type Email {
  """
  enabled when True, will enable the emailing functionality in Talk.
  """
  enabled: Boolean!

  """
  smtpURI is the SMTP connection url to send emails on.
  """
  smtpURI: String

  """
  fromAddress is the email address that will be used to send emails from.
  """
  fromAddress: String
}

################################################################################
## ReactionConfiguration
################################################################################

"""
ReactionConfiguration stores the configuration for reactions used across this
Tenant.
"""
type ReactionConfiguration {
  """
  icon is the string representing the icon to be used for the reactions.
  """
  icon: String!

  """

  """
  iconActive: String

  """
  label is the string placed beside the reaction icon to provide better context.
  """
  label: String!

  """
  labelActive is the string placed beside the reaction icon to provide better
  context when it has been selected.
  """
  labelActive: String

  """
  color is the hex color code that can be used to change the color of the button.
  """
  color: String
}

################################################################################
## Settings
################################################################################

"""
Settings stores the global settings for a given Tenant.
"""
type Settings {
  """
  domain is the domain that is associated with this Tenant.
  """
  domain: String! @auth(roles: [ADMIN])

  """
  domains will return a given list of whitelisted domains.
  """
  domains: [String!] @auth(roles: [ADMIN])

  """
  moderation is the moderation mode for all Stories on the site.
  """
  moderation: MODERATION_MODE @auth(roles: [ADMIN])

  """
  Enables a requirement for email confirmation before a user can login.
  """
  requireEmailConfirmation: Boolean!

  """
  infoBoxEnable will enable the Info Box content visible above the question
  box.
  """
  infoBoxEnable: Boolean!

  """
  infoBoxContent is the content of the Info Box.
  """
  infoBoxContent: String

  """
  questionBoxEnable will enable the Question Box's content to be visible above
  the comment box.
  """
  questionBoxEnable: Boolean!

  """
  questionBoxContent is the content of the Question Box.
  """
  questionBoxContent: String

  """
  questionBoxIcon is the icon for the Question Box.
  """
  questionBoxIcon: String

  """
  premodLinksEnable will put all comments that contain links into premod.
  """
  premodLinksEnable: Boolean @auth(roles: [ADMIN])

  """
  autoCloseStream when true will auto close the stream when the `closeTimeout`
  amount of seconds have been reached.
  """
  autoCloseStream: Boolean! @auth(roles: [ADMIN])

  """
  customCssUrl is the URL of the custom CSS used to display on the frontend.
  """
  customCssUrl: String

  """
  closedTimeout is the amount of seconds from the created_at timestamp that a
  given story will be considered closed.
  """
  closedTimeout: Int!

  """
  closedMessage is the message shown to the user when the given Story is
  closed.
  """
  closedMessage: String

  """
  disableCommenting will disable commenting site-wide.
  """
  disableCommenting: Boolean!

  """
  disableCommentingMessage will be shown above the comment stream while
  commenting is disabled site-wide.
  """
  disableCommentingMessage: String

  """
  editCommentWindowLength is the length of time (in milliseconds) after a
  comment is posted that it can still be edited by the author.
  """
  editCommentWindowLength: Int!

  """
  charCount stores the character count moderation settings.
  """
  charCount: CharCount!

  """
  organizationName is the name of the organization.
  """
  organizationName: String!

  """
  organizationContactEmail is the email of the organization.
  """
  organizationContactEmail: String!

  """
  email is the set of credentials and settings associated with the organization.
  """
  email: Email! @auth(roles: [ADMIN])

  """
  wordlist will return a given list of words.
  """
  wordlist: Wordlist! @auth(roles: [ADMIN, MODERATOR])

  """
  auth contains all the settings related to authentication and authorization.
  """
  auth: Auth!

  """
  integrations contains all the external integrations that can be enabled.
  """
  integrations: ExternalIntegrations! @auth(roles: [ADMIN])

  """
  karma is the set of settings related to how user Trust and Karma are
  handled.
  """
  karma: Karma! @auth(roles: [ADMIN, MODERATOR])

  """
  reaction specifies the configuration for reactions.
  """
  reaction: ReactionConfiguration!
}

################################################################################
## User
################################################################################

enum USER_ROLE {
  COMMENTER
  STAFF
  MODERATOR
  ADMIN
}

enum USER_USERNAME_STATUS {
  """
  UNSET is used when the username can be changed, and does not necessarily
  require moderator action to become active. This can be used when the user
  signs up with a social login and has the option of setting their own
  username.
  """
  UNSET

  """
  SET is used when the username has been set for the first time, but cannot
  change without the username being rejected by a moderator and that moderator
  agreeing that the username should be allowed to change.
  """
  SET

  """
  APPROVED is used when the username was changed, and subsequently approved by
  said moderator.
  """
  APPROVED

  """
  REJECTED is used when the username was changed, and subsequently rejected by
  said moderator.
  """
  REJECTED

  """
  CHANGED is used after a user has changed their username after it was
  rejected.
  """
  CHANGED
}

type LocalProfile {
  id: String!
}

type OIDCProfile {
  id: String!
  provider: String!
}

type SSOProfile {
  id: String!
}

union Profile = LocalProfile | OIDCProfile | SSOProfile

"""
User is someone that leaves Comments, and logs in.
"""
type User {
  """
  id is the identifier of the User.
  """
  id: ID!

  """
  username is the name of the User visible to other Users.
  """
  username: String

  """
  displayName is provided optionally when enabled and available.
  """
  displayName: String

  """
  profiles is the array of profiles assigned to the user.
  """
  profiles: [Profile!] @auth(roles: [ADMIN, MODERATOR], userIDField: "id")

  """
  role is the current role of the User.
  """
  role: USER_ROLE! @auth(roles: [ADMIN, MODERATOR], userIDField: "id")

  """
  comments are the comments of the User.
  """
  comments(
    first: Int = 10
    orderBy: COMMENT_SORT = CREATED_AT_DESC
    after: Cursor
  ): CommentsConnection! @auth(roles: [ADMIN, MODERATOR], userIDField: "id")
}

################################################################################
## Comment
################################################################################

type EditInfo {
  """
  edited will be True when the Comment has been edited in the past.
  """
  edited: Boolean!

  """
  editableUntil is the time that the comment is editable until.
  """
  editableUntil: Time
}

enum COMMENT_STATUS {
  """
  The comment is not PREMOD, but was not applied a moderation status by a
  moderator.
  """
  NONE

  """
  The comment has been accepted by a moderator.
  """
  ACCEPTED

  """
  The comment has been rejected by a moderator.
  """
  REJECTED

  """
  The comment was created while the stories premoderation option was on, and
  new comments that haven't been moderated yet are referred to as
  "premoderated" or "premod" comments.
  """
  PREMOD

  """
  SYSTEM_WITHHELD represents a comment that was withheld by the system because
  it was flagged by an internal process for further review.
  """
  SYSTEM_WITHHELD
}

"""
Comment is a comment left by a User on an Story or another Comment as a reply.
"""
type Comment {
  """
  id is the identifier of the Comment.
  """
  id: ID!

  """
  body is the content of the Comment.
  """
  body: String

  """
  createdAt is the date in which the Comment was created.
  """
  createdAt: Time!

  """
  author is the User that authored the Comment.
  """
  author: User

  """
  status represents the Comment's current status.
  """
  status: COMMENT_STATUS!

  """
  parentCount is the number of direct parents for this Comment. Currently this
  value is the same as depth.
  """
  parentCount: Int!

  """
  depth is the number of levels that a given comment is deep.
  """
  depth: Int!

  """
  replyCount is the number of replies. Only direct replies to this Comment
  are counted. Deleted comments are included in this count.
  """
  replyCount: Int!

  """
  replies will return the replies to this Comment.
  """
  replies(
    first: Int = 10
    orderBy: COMMENT_SORT = CREATED_AT_DESC
    after: Cursor
  ): CommentsConnection!

  """
  parent is the immediate parent of a given comment.
  """
  parent: Comment

  """
  rootParent is the highest level parent Comment. This Comment would have been
  left on the Story itself.
  """
  rootParent: Comment

  """
  parents returns a CommentsConnection that allows accessing direct parents of
  the given Comment.
  """
  parents(last: Int = 1, before: Cursor): CommentsConnection!

  """
  editing returns details about the edit status of a Comment.
  """
  editing: EditInfo!

  """
  actionCounts stores the counts of all the actions for the Comment.
  """
  actionCounts: ActionCounts!

  """
  myActionPresence stores the presense information for all the actions
  left by the current User on this Comment.
  """
  myActionPresence: ActionPresence

  """
  story is the Story that the Comment was written on.
  """
  story: Story!
}

type PageInfo {
  """
  Indicates that there are more nodes after this subset.
  """
  hasNextPage: Boolean!

  """
  Included for legacy Relay reasons. Always set to false.
  """
  hasPreviousPage: Boolean!

  """
  Included for legacy Relay reasons. Always set to null.
  """
  startCursor: Cursor

  """
  Specifies the last node's cursor for forwards pagination.
  """
  endCursor: Cursor
}

"""
CommentEdge represents a unique Comment in a CommentConnection.
"""
type CommentEdge {
  """
  node is the Comment for this edge.
  """
  node: Comment!

  """

  """
  cursor: Cursor
}

"""
CommentsConnection represents a subset of a comment list.
"""
type CommentsConnection {
  """
  edges are a subset of CommentEdge's.
  """
  edges: [CommentEdge!]!

  """
  pageInfo is
  """
  pageInfo: PageInfo!
}

################################################################################
## CommentCounts
################################################################################

type CommentStatusCounts {
  """
  The comment is not PREMOD, but was not applied a moderation status by a
  moderator.
  """
  NONE: Int!

  """
  The comment has been accepted by a moderator.
  """
  ACCEPTED: Int!

  """
  The comment has been rejected by a moderator.
  """
  REJECTED: Int!

  """
  The comment was created while the stories premoderation option was on, and
  new comments that haven't been moderated yet are referred to as
  "premoderated" or "premod" comments.
  """
  PREMOD: Int!

  """
  SYSTEM_WITHHELD represents a comment that was withheld by the system because
  it was flagged by an internal process for further review.
  """
  SYSTEM_WITHHELD: Int!
}

type CommentCounts {
  """
  totalVisible will return the count of all visible Comments.
  """
  totalVisible: Int!

  statuses: CommentStatusCounts! @auth(roles: [ADMIN, MODERATOR])
}

################################################################################
## Story
################################################################################

enum COMMENT_SORT {
  CREATED_AT_DESC
  CREATED_AT_ASC
  REPLIES_DESC
  RESPECT_DESC
}

"""
Story is an Article or Page where Comments are written on by Users.
"""
type Story {
  """
  id is the identifier of the Story.
  """
  id: ID!

  """
  url is the url that the Story is located on.
  """
  url: String!

  """
  title is the title of the scraped Story.
  """
  title: String

  """
  comments are the comments on the Story.
  """
  comments(
    first: Int = 10
    orderBy: COMMENT_SORT = CREATED_AT_DESC
    after: Cursor
  ): CommentsConnection!

  """
  actionCounts stores the counts of all the actions against this Story and it's
  Comments.
  """
  actionCounts: ActionCounts! @auth(roles: [ADMIN, MODERATOR])

  """
  author is the authors listed in the meta tags for the Story.
  """
  author: String

  """
  closedAt is the Time that the Story is closed for commenting.
  """
  closedAt: Time

  """
  isClosed returns true when the Story is currently closed for commenting.
  """
  isClosed: Boolean!

  """
  commentCounts stores all the counts of Comments that are left on the Comment.
  """
  commentCounts: CommentCounts!

  """
  createdAt is the date that the Story was created at.
  """
  createdAt: Time!
}

"""
StoryEdge represents a unique Story in a StoryConnection.
"""
type StoryEdge {
  """
  node is the Story for this edge.
  """
  node: Story!

  """

  """
  cursor: Cursor!
}

"""
StoriesConnection represents a subset of a Story list.
"""
type StoriesConnection {
  """
  edges are a subset of StoryEdge's.
  """
  edges: [StoryEdge!]!

  """
  pageInfo is
  """
  pageInfo: PageInfo!
}

################################################################################
## Query
################################################################################

type Query {
  """
  comment returns a specific comment.
  """
  comment(id: ID!): Comment

  """
  story is the Story specified by its ID/URL.
  """
  story(id: ID, url: String): Story

  """
  me is the current logged in User.
  """
  me: User

  """
  settings is the Settings for a given Tenant.
  """
  settings: Settings!
}

################################################################################
## Mutations
################################################################################

##################
## createComment
##################

"""
CreateCommentInput provides the input for the createComment Mutation.
"""
input CreateCommentInput {
  """
  storyID is the ID of the Story where we are creating a comment on.
  """
  storyID: ID!

  """
  parentID is the optional ID of the Comment that we are replying to.
  """
  parentID: ID

  """
  body is the Comment body, the content of the Comment.
  """
  body: String!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

"""
CreateCommentPayload contains the created Comment after the createComment
mutation.
"""
type CreateCommentPayload {
  """
  edge is the possibly created comment edge.
  """
  edge: CommentEdge

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## editComment
##################

"""
EditCommentInput provides the input for the editComment Mutation.
"""
input EditCommentInput {
  """
  commentID is the ID of the comment being edited.
  """
  commentID: ID!

  """
  body is the Comment body, the content of the Comment.
  """
  body: String!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

"""
EditCommentPayload contains the edited Comment after the editComment
mutation.
"""
type EditCommentPayload {
  """
  comment is the possibly edited comment.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## updateSettings
##################

input SettingsEmailInput {
  """
  enabled when True, will enable the emailing functionality in Talk.
  """
  enabled: Boolean

  """
  smtpURI is the SMTP connection url to send emails on.
  """
  smtpURI: String

  """
  fromAddress is the email address that will be used to send emails from.
  """
  fromAddress: String
}

input SettingsWordlistInput {
  """
  banned words will by default reject the comment if it is found.
  """
  banned: [String!]

  """
  suspect words will simply flag the comment.
  """
  suspect: [String!]
}

input SettingsLocalAuthIntegrationInput {
  enabled: Boolean
}

input SettingsSSOAuthIntegrationInput {
  enabled: Boolean

  """
  key is the secret that is used to sign tokens.
  """
  key: String

  """
  displayNameEnable when enabled, will allow Users to set and view their
  displayName's.
  """
  displayNameEnable: Boolean
}

input SettingsOIDCAuthIntegrationInput {
  enabled: Boolean

  name: String
  clientID: String
  clientSecret: String
  authorizationURL: String
  tokenURL: String

  """
  displayNameEnable when enabled, will allow Users to set and view their
  displayName's.
  """
  displayNameEnable: Boolean
}

input SettingsGoogleAuthIntegrationInput {
  enabled: Boolean
  clientID: String
  clientSecret: String
}

input SettingsFacebookAuthIntegrationInput {
  enabled: Boolean
  clientID: String
  clientSecret: String
}

input SettingsAuthIntegrationsInput {
  local: SettingsLocalAuthIntegrationInput
  sso: SettingsSSOAuthIntegrationInput
  oidc: SettingsOIDCAuthIntegrationInput
  google: SettingsGoogleAuthIntegrationInput
  facebook: SettingsFacebookAuthIntegrationInput
}

"""
Auth contains all the settings related to authentication and
authorization.
"""
input SettingsAuthInput {
  """
  integrations are the set of configurations for the variations of
  authentication solutions.
  """
  integrations: SettingsAuthIntegrationsInput
}

input SettingsAkismetExternalIntegrationInput {
  """
  enabled when True will enable the integration.
  """
  enabled: Boolean

  """
  The key for the Akismet integration.
  """
  key: String

  """
  The site (blog) for the Akismet integration.
  """
  site: String
}

input SettingsPerspectiveExternalIntegrationInput {
  """
  enabled when True will enable the integration.
  """
  enabled: Boolean

  """
  The endpoint that Talk should use to communicate with the perspective API.
  """
  endpoint: String

  """
  The key for the Perspective API integration.
  """
  key: String

  """
  The threshold that given a specific toxic comment score, the comment will
  be marked by Talk as toxic.
  """
  threshold: Float

  """
  When True, comments sent will not be stored by the Google Perspective API.
  """
  doNotStore: Boolean
}

input SettingsExternalIntegrationsInput {
  """
  akismet provides integration with the Akismet Spam detection service.
  """
  akismet: SettingsAkismetExternalIntegrationInput

  """
  perspective provides integration with the Perspective API comment analysis
  platform.
  """
  perspective: SettingsPerspectiveExternalIntegrationInput
}

"""
KarmaThreshold defines the bounds for which a User will become unreliable or
reliable based on their karma score. If the score is equal or less than the
unreliable value, they are unreliable. If the score is equal or more than the
reliable value, they are reliable. If they are neither reliable or unreliable
then they are neutral.
"""
input SettingsKarmaThresholdInput {
  reliable: Int
  unreliable: Int
}

input SettingsKarmaThresholdsInput {
  """
  flag represents karma settings in relation to how well a User's flagging
  ability aligns with the moderation decisions made by moderators.
  """
  flag: SettingsKarmaThresholdInput

  """
  comment represents the karma setting in relation to how well a User's comments are moderated.
  """
  comment: SettingsKarmaThresholdInput
}

input SettingsKarmaInput {
  """
  When true, checks will be completed to ensure that the Karma checks are
  completed.
  """
  enabled: Boolean

  """
  karmaThresholds contains the currently set thresholds for triggering Trust
  behavior.
  """
  thresholds: SettingsKarmaThresholdsInput
}

input SettingsCharCountInput {
  """
  enabled when true, enables the character count moderation phase.
  """
  enabled: Boolean

  """
  min is the smallest length of a Comment that may be posted.
  """
  min: Int

  """
  max is the largest length of a Comment that may be posted.
  """
  max: Int
}

"""
SettingsInput is the partial type of the Settings type for performing mutations.
"""
input SettingsInput {
  """
  domains will return a given list of whitelisted domains.
  """
  domains: [String!]

  """
  moderation is the moderation mode for all Stories on the site.
  """
  moderation: MODERATION_MODE

  """
  Enables a requirement for email confirmation before a user can login.
  """
  requireEmailConfirmation: Boolean

  """
  infoBoxEnable will enable the Info Box content visible above the question
  box.
  """
  infoBoxEnable: Boolean

  """
  infoBoxContent is the content of the Info Box.
  """
  infoBoxContent: String

  """
  questionBoxEnable will enable the Question Box's content to be visible above
  the comment box.
  """
  questionBoxEnable: Boolean

  """
  questionBoxContent is the content of the Question Box.
  """
  questionBoxContent: String

  """
  questionBoxIcon is the icon for the Question Box.
  """
  questionBoxIcon: String

  """
  premodLinksEnable will put all comments that contain links into premod.
  """
  premodLinksEnable: Boolean

  """
  autoCloseStream when true will auto close the stream when the `closeTimeout`
  amount of seconds have been reached.
  """
  autoCloseStream: Boolean

  """
  customCssUrl is the URL of the custom CSS used to display on the frontend.
  """
  customCssUrl: String

  """
  closedTimeout is the amount of seconds from the created_at timestamp that a
  given story will be considered closed.
  """
  closedTimeout: Int

  """
  closedMessage is the message shown to the user when the given Story is
  closed.
  """
  closedMessage: String

  """
  disableCommenting will disable commenting site-wide.
  """
  disableCommenting: Boolean

  """
  disableCommentingMessage will be shown above the comment stream while
  commenting is disabled site-wide.
  """
  disableCommentingMessage: String

  """
  editCommentWindowLength is the length of time (in milliseconds) after a
  comment is posted that it can still be edited by the author.
  """
  editCommentWindowLength: Int

  """
  organizationName is the name of the organization.
  """
  organizationName: String

  """
  organizationContactEmail is the email of the organization.
  """
  organizationContactEmail: String

  """
  wordlist will return a given list of words.
  """
  wordlist: SettingsWordlistInput

  """
  email is the set of credentials and settings associated with the organization.
  """
  email: SettingsEmailInput

  """
  auth contains all the settings related to authentication and authorization.
  """
  auth: SettingsAuthInput

  """
  integrations contains all the external integrations that can be enabled.
  """
  integrations: SettingsExternalIntegrationsInput

  """
  karma is the set of settings related to how user Trust and Karma are
  handled.
  """
  karma: SettingsKarmaInput

  """
  charCount stores the character count moderation settings.
  """
  charCount: SettingsCharCountInput
}

"""
UpdateSettingsInput provides the input for the updateSettings Mutation.
"""
input UpdateSettingsInput {
  """
  settings is the partial set of settings that will be used as a patch against
  the existing settings object.
  """
  settings: SettingsInput!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

"""
UpdateSettingsPayload contains the updated Settings after the updateSettings
mutation.
"""
type UpdateSettingsPayload {
  """
  settings is the updated Settings.
  """
  settings: Settings

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## createCommentReaction
##################

input CreateCommentReactionInput {
  """
  commentID is the Comment's ID that we want to create a Reaction on.
  """
  commentID: ID!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

type CreateCommentReactionPayload {
  """
  comment is the Comment that the Reaction was created on.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## deleteCommentReaction
##################

input DeleteCommentReactionInput {
  """
  commentID is the Comment's ID that we want to delete a Reaction on.
  """
  commentID: ID!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

type DeleteCommentReactionPayload {
  """
  comment is the Comment that the Reaction was deleted on.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## createCommentDontAgree
##################

input CreateCommentDontAgreeInput {
  """
  commentID is the Comment's ID that we want to create a DontAgree on.
  """
  commentID: ID!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

type CreateCommentDontAgreePayload {
  """
  comment is the Comment that the DontAgree was created on.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## deleteCommentDontAgree
##################

input DeleteCommentDontAgreeInput {
  """
  commentID is the Comment's ID that we want to delete a DontAgree on.
  """
  commentID: ID!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

type DeleteCommentDontAgreePayload {
  """
  comment is the Comment that the DontAgree was deleted on.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## createCommentFlag
##################

input CreateCommentFlagInput {
  """
  commentID is the Comment's ID that we want to create a Flag on.
  """
  commentID: ID!

  """
  reason is the selected reason why the Flag is being created.
  """
  reason: COMMENT_FLAG_REPORTED_REASON!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

type CreateCommentFlagPayload {
  """
  comment is the Comment that the Flag was created on.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## deleteCommentFlag
##################

input DeleteCommentFlagInput {
  """
  commentID is the Comment's ID that we want to delete a Flag on.
  """
  commentID: ID!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

type DeleteCommentFlagPayload {
  """
  comment is the Comment that the Flag was deleted on.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## Mutation
##################

type Mutation {
  """
  createComment will create a Comment as the current logged in User.
  """
  createComment(input: CreateCommentInput!): CreateCommentPayload

  """
  editComment will allow the author of a comment to change the body within the
  time allotment.
  """
  editComment(input: EditCommentInput!): EditCommentPayload @auth

  """
  updateSettings will update the Settings for the given Tenant.
  """
  updateSettings(input: UpdateSettingsInput!): UpdateSettingsPayload
    @auth(roles: [ADMIN, MODERATOR])

  """
  createCommentReaction will create a Reaction authored by the current logged in
  User on a Comment.
  """
  createCommentReaction(
    input: CreateCommentReactionInput!
  ): CreateCommentReactionPayload @auth

  """
  deleteCommentReaction will delete a Reaction authored by the current logged in
  User on a Comment if it exists.
  """
  deleteCommentReaction(
    input: CreateCommentReactionInput!
  ): CreateCommentReactionPayload @auth

  """
  createCommentDontAgree will create a DontAgree authored by the current logged in
  User on a Comment.
  """
  createCommentDontAgree(
    input: CreateCommentDontAgreeInput!
  ): CreateCommentDontAgreePayload @auth

  """
  deleteCommentDontAgree will delete a DontAgree authored by the current logged in
  User on a Comment if it exists.
  """
  deleteCommentDontAgree(
    input: CreateCommentDontAgreeInput!
  ): CreateCommentDontAgreePayload @auth

  """
  createCommentFlag will create a Flag authored by the current logged in User on
  a given Comment.
  """
  createCommentFlag(input: CreateCommentFlagInput!): CreateCommentFlagPayload
    @auth

  """
  deleteCommentFlag will create a Flag authored by the current logged in User on
  a given Comment.
  """
  deleteCommentFlag(input: DeleteCommentFlagInput!): DeleteCommentFlagPayload
    @auth
}

################################################################################
## Subscriptions
################################################################################

type Subscription {
  commentCreated(storyID: ID!): Comment
}
