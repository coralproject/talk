################################################################################
## Custom Directives
################################################################################

"""
auth is a directive that will enforce authorization rules on the schema
definition. It will restrict the viewer of the field based on roles or if the
`userIDField` is specified, it will see if the current users ID equals the field
specified. This allows users that own a specific resource (like a comment, or a
flag) see their own content, but restrict it to everyone else.
"""
directive @auth(roles: [USER_ROLE!], userIDField: String) on FIELD_DEFINITION

################################################################################
## Custom Scalar Types
################################################################################

"""
Time represented as an ISO8601 string.
"""
scalar Time

"""
Cursor represents a paginating cursor.
"""
scalar Cursor

################################################################################
## Actions
################################################################################

enum ACTION_TYPE {
  FLAG
  DONTAGREE
}

enum ACTION_ITEM_TYPE {
  COMMENTS
}

################################################################################
## Settings
################################################################################

# The moderation mode of the site.
enum MODERATION_MODE {
  """
  Comments posted while in `PRE` mode will be labeled with a `PREMOD`
  status and will require a moderator decision before being visible.
  """
  PRE

  """
  Comments posted while in `POST` will be visible immediately.
  """
  POST
}

"""
WordlistSettings describes all the available wordlists.
"""
type WordlistSettings {
  """
  banned words will by default reject the comment if it is found.
  """
  banned: [String!]!

  """
  suspect words will simply flag the comment.
  """
  suspect: [String!]!
}

################################################################################
## AuthSettings
################################################################################

##########################
## LocalAuthIntegration
##########################

type LocalAuthIntegration {
  enabled: Boolean!
}

##########################
## SSOAuthIntegration
##########################

type SSOAuthIntegrationConfig {
  key: String!

  """
  displayNameEnable when enabled, will allow Users to set and view their
  displayName's.
  """
  displayNameEnable: Boolean!
}

type SSOAuthIntegration {
  enabled: Boolean!
  config: SSOAuthIntegrationConfig @auth(roles: [ADMIN])
}

##########################
## OIDCAuthIntegration
##########################

type OIDCAuthIntegrationConfig {
  clientID: String!
  clientSecret: String!
  authorizationURL: String!
  tokenURL: String!

  """
  displayNameEnable when enabled, will allow Users to set and view their
  displayName's.
  """
  displayNameEnable: Boolean!
}

type OIDCAuthIntegrationOptions {
  name: String!
}

type OIDCAuthIntegration {
  enabled: Boolean!
  options: OIDCAuthIntegrationOptions
  config: SSOAuthIntegrationConfig @auth(roles: [ADMIN])
}

##########################
## GoogleAuthIntegration
##########################

type GoogleAuthIntegrationConfig {
  clientID: String!
  clientSecret: String!
}

type GoogleAuthIntegration {
  enabled: Boolean!
  config: GoogleAuthIntegrationConfig @auth(roles: [ADMIN])
}

##########################
## FacebookAuthIntegration
##########################

type FacebookAuthIntegrationConfig {
  clientID: String!
  clientSecret: String!
}

type FacebookAuthIntegration {
  enabled: Boolean!
  config: FacebookAuthIntegrationConfig @auth(roles: [ADMIN])
}

type AuthIntegrations {
  local: LocalAuthIntegration!
  sso: SSOAuthIntegration!
  oidc: OIDCAuthIntegration!
  google: GoogleAuthIntegration!
  facebook: FacebookAuthIntegration!
}

"""
AuthSettings contains all the settings related to authentication and
authorization.
"""
type AuthSettings {
  """
  integrations are the set of configurations for the variations of
  authentication solutions.
  """
  integrations: AuthIntegrations!
}

################################################################################
## Settings
################################################################################

"""
Settings stores the global settings for a given Tenant.
"""
type Settings {
  """
  domain is the domain that is associated with this Tenant.
  """
  domain: String @auth(roles: [ADMIN])

  """
  moderation is the moderation mode for all Asset's on the site.
  """
  moderation: MODERATION_MODE @auth(roles: [ADMIN])

  """
  Enables a requirement for email confirmation before a user can login.
  """
  requireEmailConfirmation: Boolean!

  """
  infoBoxEnable will enable the Info Box content visible above the question
  box.
  """
  infoBoxEnable: Boolean!

  """
  infoBoxContent is the content of the Info Box.
  """
  infoBoxContent: String

  """
  questionBoxEnable will enable the Question Box's content to be visible above
  the comment box.
  """
  questionBoxEnable: Boolean!

  """
  questionBoxContent is the content of the Question Box.
  """
  questionBoxContent: String

  """
  questionBoxIcon is the icon for the Question Box.
  """
  questionBoxIcon: String

  """
  premodLinksEnable will put all comments that contain links into premod.
  """
  premodLinksEnable: Boolean @auth(roles: [ADMIN])

  """
  autoCloseStream when true will auto close the stream when the `closeTimeout`
  amount of seconds have been reached.
  """
  autoCloseStream: Boolean! @auth(roles: [ADMIN])

  """
  customCssUrl is the URL of the custom CSS used to display on the frontend.
  """
  customCssUrl: String

  """
  closedTimeout is the amount of seconds from the created_at timestamp that a
  given asset will be considered closed.
  """
  closedTimeout: Int!

  """
  closedMessage is the message shown to the user when the given Asset is
  closed.
  """
  closedMessage: String

  """
  disableCommenting will disable commenting site-wide.
  """
  disableCommenting: Boolean!

  """
  disableCommentingMessage will be shown above the comment stream while
  commenting is disabled site-wide.
  """
  disableCommentingMessage: String

  """
  editCommentWindowLength is the length of time (in milliseconds) after a
  comment is posted that it can still be edited by the author.
  """
  editCommentWindowLength: Int!

  """
  charCountEnable is true when the character count restriction is enabled.
  """
  charCountEnable: Boolean!

  """
  charCount is the maximum number of characters a comment may be.
  """
  charCount: Int

  """
  organizationName is the name of the organization.
  """
  organizationName: String

  """
  organizationContactEmail is the email of the organization.
  """
  organizationContactEmail: String

  """
  wordlist will return a given list of words.
  """
  wordlist: WordlistSettings @auth(roles: [ADMIN, MODERATOR])

  """
  domains will return a given list of whitelisted domains.
  """
  domains: [String!] @auth(roles: [ADMIN])

  """
  auth contains all the settings related to authentication and authorization.
  """
  auth: AuthSettings!
}

################################################################################
## User
################################################################################

enum USER_ROLE {
  COMMENTER
  STAFF
  MODERATOR
  ADMIN
}

enum USER_USERNAME_STATUS {
  """
  UNSET is used when the username can be changed, and does not necessarily
  require moderator action to become active. This can be used when the user
  signs up with a social login and has the option of setting their own
  username.
  """
  UNSET

  """
  SET is used when the username has been set for the first time, but cannot
  change without the username being rejected by a moderator and that moderator
  agreeing that the username should be allowed to change.
  """
  SET

  """
  APPROVED is used when the username was changed, and subsequently approved by
  said moderator.
  """
  APPROVED

  """
  REJECTED is used when the username was changed, and subsequently rejected by
  said moderator.
  """
  REJECTED

  """
  CHANGED is used after a user has changed their username after it was
  rejected.
  """
  CHANGED
}

type LocalProfile {
  id: String!
}

type OIDCProfile {
  id: String!
  provider: String!
}

type SSOProfile {
  id: String!
}

union Profile = LocalProfile | OIDCProfile | SSOProfile

"""
User is someone that leaves Comments, and logs in.
"""
type User {
  """
  id is the identifier of the User.
  """
  id: ID!

  """
  username is the name of the User visible to other Users.
  """
  username: String

  """
  displayName is provided optionally when enabled and available.
  """
  displayName: String

  """
  profiles is the array of profiles assigned to the user.
  """
  profiles: [Profile!] @auth(roles: [ADMIN, MODERATOR], userIDField: "id")

  """
  role is the current role of the User.
  """
  role: USER_ROLE! @auth(roles: [ADMIN, MODERATOR], userIDField: "id")
}

################################################################################
## Comment
################################################################################

enum COMMENT_STATUS {
  """
  The comment is not PREMOD, but was not applied a moderation status by a
  moderator.
  """
  NONE

  """
  The comment has been accepted by a moderator.
  """
  ACCEPTED

  """
  The comment has been rejected by a moderator.
  """
  REJECTED

  """
  The comment was created while the asset's premoderation option was on, and
  new comments that haven't been moderated yet are referred to as
  "premoderated" or "premod" comments.
  """
  PREMOD

  """
  SYSTEM_WITHHELD represents a comment that was withheld by the system because
  it was flagged by an internal process for further review.
  """
  SYSTEM_WITHHELD
}

"""
Comment is a comment left by a User on an Asset or another Comment as a reply.
"""
type Comment {
  """
  id is the identifier of the Comment.
  """
  id: ID!

  """
  body is the content of the Comment.
  """
  body: String

  """
  createdAt is the date in which the comment was created.
  """
  createdAt: Time

  """
  author is the User that authored the Comment.
  """
  author: User

  """
  status represents the Comment's current Status.
  """
  status: COMMENT_STATUS!

  """
  replyCount is the number of replies. Only direct replies to this Comment
  are counted. Deleted comments are included in this count.
  """
  replyCount: Int

  """
  replies will return the replies to this comment.
  """
  replies(
    first: Int = 10
    orderBy: COMMENT_SORT = CREATED_AT_DESC
    after: Cursor
  ): CommentsConnection
}

type PageInfo {
  """
  Indicates that there are more nodes after this subset.
  """
  hasNextPage: Boolean

  """
  Included for legacy Relay reasons. Always set to false.
  """
  hasPreviousPage: Boolean

  """
  Included for legacy Relay reasons. Always set to null.
  """
  startCursor: Cursor

  """
  Specifies the last node's cursor for forwards pagination.
  """
  endCursor: Cursor
}

"""
CommentEdge represents a unique Comment in a CommentConnection.
"""
type CommentEdge {
  """
  node is the Comment for this edge.
  """
  node: Comment!

  """

  """
  cursor: Cursor!
}

"""
CommentsConnection represents a subset of a comment list.
"""
type CommentsConnection {
  """
  edges are a subset of CommentEdge's.
  """
  edges: [CommentEdge!]!

  """
  pageInfo is
  """
  pageInfo: PageInfo!
}

################################################################################
## Asset
################################################################################

enum COMMENT_SORT {
  CREATED_AT_DESC
  CREATED_AT_ASC
  REPLIES_DESC
  RESPECT_DESC
}

"""
Asset is an Article or Page where Comments are written on by Users.
"""
type Asset {
  """
  id is the identifier of the Asset.
  """
  id: ID!

  """
  url is the url that the Asset is located on.
  """
  url: String!

  """
  title is the title of the scraped Asset.
  """
  title: String

  """
  comments are the comments on the Asset.
  """
  comments(
    first: Int = 10
    orderBy: COMMENT_SORT = CREATED_AT_DESC
    after: Cursor
  ): CommentsConnection!

  """
  author is the authors listed in the meta tags for the Asset.
  """
  author: String

  """
  closedAt is the Time that the Asset is closed for commenting.
  """
  closedAt: Time

  """
  isClosed returns true when the Asset is currently closed for commenting.
  """
  isClosed: Boolean!

  """
  createdAt is the date that the Asset was created at.
  """
  createdAt: Time!
}

"""
AssetEdge represents a unique Asset in a AssetConnection.
"""
type AssetEdge {
  """
  node is the Asset for this edge.
  """
  node: Asset!

  """

  """
  cursor: Cursor!
}

"""
AssetsConnection represents a subset of a Asset list.
"""
type AssetsConnection {
  """
  edges are a subset of AssetEdge's.
  """
  edges: [AssetEdge!]!

  """
  pageInfo is
  """
  pageInfo: PageInfo!
}

################################################################################
## Query
################################################################################

type Query {
  """
  comment returns a specific comment.
  """
  comment(id: ID!): Comment

  """
  assets returns a AssetsConnection.
  """
  assets(cursor: Cursor, limit: Int = 10): AssetsConnection

  """
  asset is the Asset specified by its ID/URL.
  """
  asset(id: ID, url: String): Asset

  """
  me is the current logged in User.
  """
  me: User

  """
  settings is the Settings for a given Tenant.
  """
  settings: Settings!
}

################################################################################
## Mutations
################################################################################

##################
## createComment
##################

"""
CreateCommentInput provides the input for the createComment Mutation.
"""
input CreateCommentInput {
  """
  assetID is the ID of the Asset where we are creating a comment on.
  """
  assetID: ID!

  """
  parentID is the optional ID of the Comment that we are replying to.
  """
  parentID: ID

  """
  body is the Comment body, the content of the Comment.
  """
  body: String!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

"""
CreateCommentPayload contains the created Comment after the createComment
mutation.
"""
type CreateCommentPayload {
  """
  comment is the possibly created comment.
  """
  comment: Comment

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## updateSettings
##################

"""
SettingsInput is the partial type of the Settings type for performing mutations.
"""
input SettingsInput {
  moderation: MODERATION_MODE
  requireEmailConfirmation: Boolean
  infoBoxEnable: Boolean
  infoBoxContent: String
  questionBoxEnable: Boolean
  questionBoxContent: String
  questionBoxIcon: String
  premodLinksEnable: Boolean
  autoCloseStream: Boolean
  customCssUrl: String
  closedTimeout: Int
  closedMessage: String
  disableCommenting: Boolean
  disableCommentingMessage: String
  editCommentWindowLength: Int
  charCountEnable: Boolean
  charCount: Int
  organizationName: String
  organizationContactEmail: String
  # wordlist: WordlistSettings @auth(roles: [ADMIN, MODERATOR])
  domains: [String!]
  # auth: AuthSettings!
}

"""
UpdateSettingsInput provides the input for the updateSettings Mutation.
"""
input UpdateSettingsInput {
  settings: SettingsInput!

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

"""
UpdateSettingsPayload contains the updated Settings after the updateSettings
mutation.
"""
type UpdateSettingsPayload {
  """
  settings is the updated Settings.
  """
  settings: Settings

  """
  clientMutationId is required for Relay support.
  """
  clientMutationId: String!
}

##################
## Mutation
##################

type Mutation {
  """
  createComment will create a Comment as the current logged in User.
  """
  createComment(input: CreateCommentInput!): CreateCommentPayload @auth

  """
  updateSettings will update the Settings for the given Tenant.
  """
  updateSettings(input: UpdateSettingsInput!): UpdateSettingsPayload
    @auth(roles: [ADMIN])
}

################################################################################
## Subscriptions
################################################################################

type Subscription {
  commentCreated(assetID: ID!): Comment
}
