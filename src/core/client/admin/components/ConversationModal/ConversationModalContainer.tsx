// import { Localized } from "@fluent/react/compat";
import React, { FunctionComponent } from "react";
import { graphql, RelayPaginationProp } from "react-relay";

import {
  useLoadMore,
  withPaginationContainer,
} from "coral-framework/lib/relay";
import { Button, HorizontalGutter } from "coral-ui/components/v2";

import { ConversationModalContainer_comment } from "coral-admin/__generated__/ConversationModalContainer_comment.graphql";
import { ConversationModalContainerPaginationQueryVariables } from "coral-admin/__generated__/ConversationModalContainerPaginationQuery.graphql";

import styles from "./ConversationModalContainer.css";

interface Props {
  relay: RelayPaginationProp;
  comment: ConversationModalContainer_comment;
  onClose: () => void;
}

const ConversationModalContainer: FunctionComponent<Props> = ({
  comment,
  relay,
}) => {
  const [loadMore] = useLoadMore(relay, 5);
  const parents = comment.parents.edges.map(edge => edge.node);
  return (
    <HorizontalGutter>
      <h1>
        Comment on:{" "}
        {comment.story.metadata
          ? comment.story.metadata.title
          : comment.story.url}
      </h1>
      {comment.parentCount > parents.length && (
        <Button onClick={loadMore}>Show more of this conversation</Button>
      )}
      {comment.parents && (
        <>
          {parents.map(parent => (
            <div key={parent.id}>
              <strong>{parent.author ? parent.author.username : null}</strong>
              <div>{parent.body}</div>
            </div>
          ))}
        </>
      )}
      <div className={styles.comment}>
        <strong>{comment.author ? comment.author.username : null}</strong>
        {comment.body}
      </div>
    </HorizontalGutter>
  );
};

// TODO: (cvle) If this could be autogenerated.
type FragmentVariables = ConversationModalContainerPaginationQueryVariables;

const enhanced = withPaginationContainer<
  Props,
  ConversationModalContainerPaginationQueryVariables,
  FragmentVariables
>(
  {
    comment: graphql`
      fragment ConversationModalContainer_comment on Comment
        @argumentDefinitions(
          count: { type: "Int!", defaultValue: 1 }
          cursor: { type: "Cursor" }
        ) {
        id
        body
        story {
          url
          metadata {
            title
          }
        }
        author {
          username
        }
        rootParent {
          id
        }
        parents(last: $count, before: $cursor)
          @connection(key: "ConversationModal_parents") {
          edges {
            node {
              id
              body
              author {
                username
              }
            }
          }
        }
        parentCount
      }
    `,
  },
  {
    direction: "backward",
    getConnectionFromProps(props) {
      return props.comment && props.comment.parents;
    },
    // This is also the default implementation of `getFragmentVariables` if it isn't provided.
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, { count, cursor }) {
      return {
        count,
        cursor,
        // commentID isn't specified as an @argument for the fragment, but it should be a
        // variable available for the fragment under the query root.
        commentID: props.comment.id,
      };
    },
    query: graphql`
      # Pagination query to be fetched upon calling 'loadMore'.
      # Notice that we re-use our fragment, and the shape of this query matches our fragment spec.
      query ConversationModalContainerPaginationQuery(
        $count: Int!
        $cursor: Cursor
        $commentID: ID!
      ) {
        comment(id: $commentID) {
          ...ConversationModalContainer_comment
            @arguments(count: $count, cursor: $cursor)
        }
      }
    `,
  }
)(ConversationModalContainer);

export default enhanced;
