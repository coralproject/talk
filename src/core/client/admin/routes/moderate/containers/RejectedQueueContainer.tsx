import { RouteProps } from "found";
import React from "react";
import { graphql, RelayPaginationProp } from "react-relay";

import { RejectedQueueContainer_query as QueryData } from "talk-admin/__generated__/RejectedQueueContainer_query.graphql";
import { RejectedQueueContainerPaginationQueryVariables } from "talk-admin/__generated__/RejectedQueueContainerPaginationQuery.graphql";
import { IntersectionProvider } from "talk-framework/lib/intersection";
import { withPaginationContainer } from "talk-framework/lib/relay";

import LoadingQueue from "../components/LoadingQueue";
import Queue from "../components/Queue";

interface RejectedQueueContainerProps {
  query: QueryData;
  relay: RelayPaginationProp;
}

// TODO: use generated types
const danglingLogic = (status: string) => ["ACCEPTED"].indexOf(status) >= 0;

export class RejectedQueueContainer extends React.Component<
  RejectedQueueContainerProps
> {
  public static routeConfig: RouteProps;

  public state = {
    disableLoadMore: false,
  };

  public render() {
    const comments = this.props.query.comments!.edges.map(edge => edge.node);
    return (
      <IntersectionProvider>
        <Queue
          settings={this.props.query.settings}
          comments={comments}
          onLoadMore={this.loadMore}
          hasMore={this.props.relay.hasMore()}
          disableLoadMore={this.state.disableLoadMore}
          danglingLogic={danglingLogic}
        />{" "}
      </IntersectionProvider>
    );
  }

  private loadMore = () => {
    if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {
      return;
    }
    this.setState({ disableLoadMore: true });
    this.props.relay.loadMore(
      10, // Fetch the next 10 feed items
      error => {
        this.setState({ disableLoadMore: false });
        if (error) {
          // tslint:disable-next-line:no-console
          console.error(error);
        }
      }
    );
  };
}

// TODO: (cvle) This should be autogenerated.
interface FragmentVariables {
  count: number;
  cursor?: string;
}

const enhanced = (withPaginationContainer<
  RejectedQueueContainerProps,
  RejectedQueueContainerPaginationQueryVariables,
  FragmentVariables
>(
  {
    query: graphql`
      fragment RejectedQueueContainer_query on Query
        @argumentDefinitions(
          count: { type: "Int!", defaultValue: 5 }
          cursor: { type: "Cursor" }
        ) {
        comments(status: REJECTED, first: $count, after: $cursor)
          @connection(key: "RejectedQueue_comments") {
          edges {
            node {
              id
              ...ModerateCardContainer_comment
            }
          }
        }
        settings {
          ...ModerateCardContainer_settings
        }
      }
    `,
  },
  {
    direction: "forward",
    getConnectionFromProps(props) {
      return props.query && props.query.comments;
    },
    // This is also the default implementation of `getFragmentVariables` if it isn't provided.
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      };
    },
    getVariables(props, { count, cursor }, fragmentVariables) {
      return {
        count,
        cursor,
      };
    },
    query: graphql`
      # Pagination query to be fetched upon calling 'loadMore'.
      # Notice that we re-use our fragment, and the shape of this query matches our fragment spec.
      query RejectedQueueContainerPaginationQuery(
        $count: Int!
        $cursor: Cursor
      ) {
        ...RejectedQueueContainer_query
          @arguments(count: $count, cursor: $cursor)
      }
    `,
  }
)(RejectedQueueContainer) as any) as typeof RejectedQueueContainer;

enhanced.routeConfig = {
  Component: enhanced,
  query: graphql`
    query RejectedQueueContainerQuery {
      ...RejectedQueueContainer_query
    }
  `,
  cacheConfig: { force: true },
  render: ({ Component, props }) => {
    if (Component && props) {
      return <Component query={props} />;
    }
    return <LoadingQueue />;
  },
};

export default enhanced;
